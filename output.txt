Help on package wbgapi:

NAME
    wbgapi

DESCRIPTION
    wbgapi provides a comprehensive interface to the World Bank's data and
    metadata API with built-in pandas integration

PACKAGE CONTENTS
    __version__
    data
    economy
    economy_coder
    economy_metadata
    income
    lending
    region
    series
    series_metadata
    source
    time
    topic
    utils

CLASSES
    builtins.Exception(builtins.BaseException)
        APIError
            APIResponseError
        URLError
    builtins.dict(builtins.object)
        Coder
    builtins.object
        Featureset
        Metadata
        MetadataCollection

    class APIError(builtins.Exception)
     |  APIError(url, msg, code=None)
     |
     |  Method resolution order:
     |      APIError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, url, msg, code=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class APIResponseError(APIError)
     |  APIResponseError(url, msg)
     |
     |  This error indicates that the module didn't understand the response from the API.
     |  Either it couldn't parse the JSON (the API sometimes returns XML even when JSON is
     |  requested) or it doesn't recognize the json schema
     |
     |  Method resolution order:
     |      APIResponseError
     |      APIError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, url, msg)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from APIError:
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from APIError:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class Coder(builtins.dict)
     |  Class returned by coder if passed a list of terms
     |
     |  Method resolution order:
     |      Coder
     |      builtins.dict
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __ior__(self, value, /)
     |      Return self|=value.
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __or__(self, value, /)
     |      Return self|value.
     |
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |
     |  __ror__(self, value, /)
     |      Return value|self.
     |
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |
     |      If the key is not found, return the default if given; otherwise,
     |      raise a KeyError.
     |
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |
     |      Return the value for key if key is in the dictionary, else default.
     |
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |
     |  __hash__ = None

    class Featureset(builtins.object)
     |  Featureset(items, columns=None)
     |
     |  Methods defined here:
     |
     |  __init__(self, items, columns=None)
     |      can be initialized with any iterable
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  table(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Metadata(builtins.object)
     |  Metadata(concept, id, name)
     |
     |  Methods defined here:
     |
     |  __init__(self, concept, id, name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  repr(self, q=None, padding=None)
     |      Same as __repr__ but includes formatting options
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class MetadataCollection(builtins.object)
     |  MetadataCollection(brief=False, padding=80, q=None)
     |
     |  Methods defined here:
     |
     |  __init__(self, brief=False, padding=80, q=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  append(self, meta)
     |      Append a Metadata object to our store
     |
     |  brief_table(self, tablefmt)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class URLError(builtins.Exception)
     |  Method resolution order:
     |      URLError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

FUNCTIONS
    Series(data, key='id', value='value', name=None)
        Convert a list-like to a pandas Series object. This core function is
        called by several dimension-specific implementation functions.

        Arguments:
            data:       an object array, generator, or function that returns a list-like

            key:        field for the Series index

            value:      field for the Series column values

            name:       Series column name. If None, same as value

        Returns:
            a pandas Series object

        Example:
            Generally you are better off calling the Series function for a specific feature
            e.g., wbgapi.time.Series(). Direct calls should only be necessary for databases
            with custom dimensions, for instance:

            wbgapi.Series(wbgapi.source.features('version', db=57))

    abbreviate(text, q=None, padding=80)
        Returns a shortened version of the text string comprised of the search pattern
        and a specified number of characters on either side. This is used to optimize
        search results. If the search pattern

    fetch(url, params={}, concepts=False, lang=None)
        Iterate over an API request with automatic paging.  The API returns a
        variety of response structures depending on the endpoint. fetch() sniffs
        the response structure and return the most appropriate set of iterated objects.

        Arguments:
            url:        partial URL (minus the base URL and langage) for the API query, minus the query string

            params:     optional query string parameters (required defaults are supplied by the function)

            concepts:   pass True to return results at the concept level, as opposed to the element/variable level

            lang:       preferred language. Pass none to use the global default

        Returns:
            a generator object.

        Example:
            for row in wbgapi.data.fetch('countries'):
              print(row['id'], row['name'])

        Notes:
            For most use cases there are higher level functions that are easier and safer than
            calling fetch() directly. But it's still very useful for direct testing and discovery
            of the API.

    get(url, params={}, concepts=False, lang=None)
        Return a single response from the API

        Arguments:
            url:        full URL for the API query, minus the query string

            params:     optional query string parameters (required defaults are supplied by the function)

            concepts:   pass True to return a result at the concept level, as opposed to the element/variable level

        Returns:
            First row from the response

        Example:
            print(wbgapi.get('countries/BRA')['name'])

    htmlTable(*args, **kwargs)
        Generates an HTML table wrapped in a <div class="wbgapi"/> to allow users
        to customize the display if they wish. All arguments are passed to tabulate;
        you should not include the 'tablefmt=html' parameter

    metadata(url, variables, concepts='all', **kwargs)
        Return metadata records

        Arguments:
            url:        url with tokens, as per refetch()

            variables:  variables that can be chunked, in priority order (see refetch)

            concepts:   Name or list-like of the concepts to return: 'all' for all concepts

            **kwargs:   Remaining arguments to pass to refetch (must include varables for tokens in url)

        Returns:
            a generator that returns Metadata objects

        Example:
            for meta in wbgapi.metadata('sources/2/series/{series}/country/{economy}/metadata', ['series', 'economy'],
                concepts=['Series','Country-Series'], series='SP.POP.TOTL', economy='FRA;CAN'):
                    print(meta.concept, meta.id, len(meta.metadata))

        Notes:
            Each return from the generator will include a unique concept/id pair and a complete corresponding metadata record

    queryParam(arg, concept=None, db=None)
        Prepare parameters for an API query. This is a core function
        called by several dimension-specific functions of the same name

        Arguments:
            arg:        a record identifier or list-like of identifiers

            concept:    concept for the arguments passed

            db:         database; pass None to access the global database

        Returns:
            a semicolon separated API-ready parameter string

    reduce(...)
        reduce(function, iterable[, initial]) -> value

        Apply a function of two arguments cumulatively to the items of a sequence
        or iterable, from left to right, so as to reduce the iterable to a single
        value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
        ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
        of the iterable in the calculation, and serves as a default when the
        iterable is empty.

    refetch(url, variables, **kwargs)
        repeating fetch: provides a variation of fetch() that allows URLs that exceed the maximium API limit to
        be chunked.

        Arguments:
            url:            partial URL with tokens, each of which must have values specified as function arguments. See example below

            variables:      array of variables to be chunked if necessary, in the order they should be chunked

            **kwargs:       remaining arguments MUST include values for each token in the url string. All arguments to fetch
                            are also acceptable and are passed to fetch. Any "chunkable" variable should be a semicolon-separated
                            value array. Arrays and iterables are not acceptable values

        Returns:
            A generator object

        Example:
            # fetch all indicators for Brazil and Argentina
            s = ';'.join([row['id'] for row in wbgapi.series.list()])
            for row in wbgapi.data.refetch('sources/{source}/series/{series}/country/{economy}', ['series', 'economy'], source=2, series=s, economy='BRA;ARG'):
                print(row)

    search(q, footnotes='none', brief=False, padding=80, db=None)
        search database metadata and return results as a print-friendly object

        Arguments:
            q:          search term

            footnotes:  how to treat footnotes: 'include', 'only', or 'none'

            brief:      abbreviated output (don't print matching values)

            padding:    approximate number of surrounding characters to include when displaying text matching
                        the search term. None returns the entire string

            db:         database; pass None to access the global database

        Returns:
            a print-friendly object

        Notes:
            This function just provides a print-friendly front end to search2. If you need to
            access search results programmatically, call search2 directly.

        Examples:
            wbgapi.search('fossil fuels')

    search2(q, footnotes='none', db=None)
        search database metadata for matching text, returning a generator

        Arguments:
            q:          search term

            footnotes:  how to treat footnotes: 'include', 'only', or 'none'

            db:         database; pass None to access the global database

        Returns:
            a generator that provides Metadata objects (same as metadata())

        Notes:
            The return of this function is the same as for the metadata() function. The difference
            is that the metadata property contains matching metadata fields and values.

        Examples:
            for row in wbgapi.search2('fossil fuels'):
                print(row)

DATA
    api_maxlen = 1400
    db = 2
    endpoint = 'https://api.worldbank.org/v2'
    get_options = {}
    lang = 'en'
    per_page = 1000
    proxies = None

VERSION
    1.0.12

FILE
    c:\users\jerry\appdata\local\programs\python\python312\lib\site-packages\wbgapi\__init__.py


None
Help on package wbgapi:

NAME
    wbgapi

DESCRIPTION
    wbgapi provides a comprehensive interface to the World Bank's data and
    metadata API with built-in pandas integration

PACKAGE CONTENTS
    __version__
    data
    economy
    economy_coder
    economy_metadata
    income
    lending
    region
    series
    series_metadata
    source
    time
    topic
    utils

CLASSES
    builtins.Exception(builtins.BaseException)
        APIError
            APIResponseError
        URLError
    builtins.dict(builtins.object)
        Coder
    builtins.object
        Featureset
        Metadata
        MetadataCollection

    class APIError(builtins.Exception)
     |  APIError(url, msg, code=None)
     |
     |  Method resolution order:
     |      APIError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, url, msg, code=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class APIResponseError(APIError)
     |  APIResponseError(url, msg)
     |
     |  This error indicates that the module didn't understand the response from the API.
     |  Either it couldn't parse the JSON (the API sometimes returns XML even when JSON is
     |  requested) or it doesn't recognize the json schema
     |
     |  Method resolution order:
     |      APIResponseError
     |      APIError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, url, msg)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from APIError:
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from APIError:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class Coder(builtins.dict)
     |  Class returned by coder if passed a list of terms
     |
     |  Method resolution order:
     |      Coder
     |      builtins.dict
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __ior__(self, value, /)
     |      Return self|=value.
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __or__(self, value, /)
     |      Return self|value.
     |
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |
     |  __ror__(self, value, /)
     |      Return value|self.
     |
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |
     |      If the key is not found, return the default if given; otherwise,
     |      raise a KeyError.
     |
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |
     |      Return the value for key if key is in the dictionary, else default.
     |
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |
     |  __hash__ = None

    class Featureset(builtins.object)
     |  Featureset(items, columns=None)
     |
     |  Methods defined here:
     |
     |  __init__(self, items, columns=None)
     |      can be initialized with any iterable
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  table(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Metadata(builtins.object)
     |  Metadata(concept, id, name)
     |
     |  Methods defined here:
     |
     |  __init__(self, concept, id, name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  repr(self, q=None, padding=None)
     |      Same as __repr__ but includes formatting options
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class MetadataCollection(builtins.object)
     |  MetadataCollection(brief=False, padding=80, q=None)
     |
     |  Methods defined here:
     |
     |  __init__(self, brief=False, padding=80, q=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  append(self, meta)
     |      Append a Metadata object to our store
     |
     |  brief_table(self, tablefmt)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class URLError(builtins.Exception)
     |  Method resolution order:
     |      URLError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  add_note(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

FUNCTIONS
    Series(data, key='id', value='value', name=None)
        Convert a list-like to a pandas Series object. This core function is
        called by several dimension-specific implementation functions.

        Arguments:
            data:       an object array, generator, or function that returns a list-like

            key:        field for the Series index

            value:      field for the Series column values

            name:       Series column name. If None, same as value

        Returns:
            a pandas Series object

        Example:
            Generally you are better off calling the Series function for a specific feature
            e.g., wbgapi.time.Series(). Direct calls should only be necessary for databases
            with custom dimensions, for instance:

            wbgapi.Series(wbgapi.source.features('version', db=57))

    abbreviate(text, q=None, padding=80)
        Returns a shortened version of the text string comprised of the search pattern
        and a specified number of characters on either side. This is used to optimize
        search results. If the search pattern

    fetch(url, params={}, concepts=False, lang=None)
        Iterate over an API request with automatic paging.  The API returns a
        variety of response structures depending on the endpoint. fetch() sniffs
        the response structure and return the most appropriate set of iterated objects.

        Arguments:
            url:        partial URL (minus the base URL and langage) for the API query, minus the query string

            params:     optional query string parameters (required defaults are supplied by the function)

            concepts:   pass True to return results at the concept level, as opposed to the element/variable level

            lang:       preferred language. Pass none to use the global default

        Returns:
            a generator object.

        Example:
            for row in wbgapi.data.fetch('countries'):
              print(row['id'], row['name'])

        Notes:
            For most use cases there are higher level functions that are easier and safer than
            calling fetch() directly. But it's still very useful for direct testing and discovery
            of the API.

    get(url, params={}, concepts=False, lang=None)
        Return a single response from the API

        Arguments:
            url:        full URL for the API query, minus the query string

            params:     optional query string parameters (required defaults are supplied by the function)

            concepts:   pass True to return a result at the concept level, as opposed to the element/variable level

        Returns:
            First row from the response

        Example:
            print(wbgapi.get('countries/BRA')['name'])

    htmlTable(*args, **kwargs)
        Generates an HTML table wrapped in a <div class="wbgapi"/> to allow users
        to customize the display if they wish. All arguments are passed to tabulate;
        you should not include the 'tablefmt=html' parameter

    metadata(url, variables, concepts='all', **kwargs)
        Return metadata records

        Arguments:
            url:        url with tokens, as per refetch()

            variables:  variables that can be chunked, in priority order (see refetch)

            concepts:   Name or list-like of the concepts to return: 'all' for all concepts

            **kwargs:   Remaining arguments to pass to refetch (must include varables for tokens in url)

        Returns:
            a generator that returns Metadata objects

        Example:
            for meta in wbgapi.metadata('sources/2/series/{series}/country/{economy}/metadata', ['series', 'economy'],
                concepts=['Series','Country-Series'], series='SP.POP.TOTL', economy='FRA;CAN'):
                    print(meta.concept, meta.id, len(meta.metadata))

        Notes:
            Each return from the generator will include a unique concept/id pair and a complete corresponding metadata record

    queryParam(arg, concept=None, db=None)
        Prepare parameters for an API query. This is a core function
        called by several dimension-specific functions of the same name

        Arguments:
            arg:        a record identifier or list-like of identifiers

            concept:    concept for the arguments passed

            db:         database; pass None to access the global database

        Returns:
            a semicolon separated API-ready parameter string

    reduce(...)
        reduce(function, iterable[, initial]) -> value

        Apply a function of two arguments cumulatively to the items of a sequence
        or iterable, from left to right, so as to reduce the iterable to a single
        value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
        ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
        of the iterable in the calculation, and serves as a default when the
        iterable is empty.

    refetch(url, variables, **kwargs)
        repeating fetch: provides a variation of fetch() that allows URLs that exceed the maximium API limit to
        be chunked.

        Arguments:
            url:            partial URL with tokens, each of which must have values specified as function arguments. See example below

            variables:      array of variables to be chunked if necessary, in the order they should be chunked

            **kwargs:       remaining arguments MUST include values for each token in the url string. All arguments to fetch
                            are also acceptable and are passed to fetch. Any "chunkable" variable should be a semicolon-separated
                            value array. Arrays and iterables are not acceptable values

        Returns:
            A generator object

        Example:
            # fetch all indicators for Brazil and Argentina
            s = ';'.join([row['id'] for row in wbgapi.series.list()])
            for row in wbgapi.data.refetch('sources/{source}/series/{series}/country/{economy}', ['series', 'economy'], source=2, series=s, economy='BRA;ARG'):
                print(row)

    search(q, footnotes='none', brief=False, padding=80, db=None)
        search database metadata and return results as a print-friendly object

        Arguments:
            q:          search term

            footnotes:  how to treat footnotes: 'include', 'only', or 'none'

            brief:      abbreviated output (don't print matching values)

            padding:    approximate number of surrounding characters to include when displaying text matching
                        the search term. None returns the entire string

            db:         database; pass None to access the global database

        Returns:
            a print-friendly object

        Notes:
            This function just provides a print-friendly front end to search2. If you need to
            access search results programmatically, call search2 directly.

        Examples:
            wbgapi.search('fossil fuels')

    search2(q, footnotes='none', db=None)
        search database metadata for matching text, returning a generator

        Arguments:
            q:          search term

            footnotes:  how to treat footnotes: 'include', 'only', or 'none'

            db:         database; pass None to access the global database

        Returns:
            a generator that provides Metadata objects (same as metadata())

        Notes:
            The return of this function is the same as for the metadata() function. The difference
            is that the metadata property contains matching metadata fields and values.

        Examples:
            for row in wbgapi.search2('fossil fuels'):
                print(row)

DATA
    api_maxlen = 1400
    db = 2
    endpoint = 'https://api.worldbank.org/v2'
    get_options = {}
    lang = 'en'
    per_page = 1000
    proxies = None

VERSION
    1.0.12

FILE
    c:\users\jerry\appdata\local\programs\python\python312\lib\site-packages\wbgapi\__init__.py


